# this file is most similar to oopsla17-epr's vertical_paxos_epr.ivy,
# but modified to have a universally quantified invariant by adding
# ghost functions: decision_quorum, round_config, choosable_node
# relation choosable

sort node
sort value
sort quorum
sort round
sort config

immutable constant none: value

immutable relation le(round, round) @no_minimize
# le is a total order
axiom le(X,X)
axiom le(X, Y) & le(Y, Z) -> le(X, Z)
axiom le(X, Y) & le(Y, X) -> X = Y
axiom le(X, Y) | le(Y, X)

immutable relation member(node, quorum)
immutable relation quorumin(quorum, config)
axiom forall C:config, Q1:quorum, Q2:quorum. quorumin(Q1,C) & quorumin(Q2,C) -> exists N:node. member(N, Q1) & member(N, Q2)

immutable relation complete_of(config, round)
axiom complete_of(C, R1) & complete_of(C, R2) -> R1 = R2

mutable relation one_a(round, round)
mutable relation one_b(node, round, round)
mutable relation left_round(node, round)
mutable relation proposal(round, value)
mutable relation vote(node, round, value)
mutable relation decision(round, value)
mutable relation configure_round_msg(round, config)
mutable relation complete_msg(round)
mutable constant master_complete: round


# ghost functions
mutable function decision_quorum(round, value): quorum
mutable function round_config(round): config
mutable function choosable_node(round, value, quorum): node


init !one_a(R1, R2)
init !one_b(N, R1, R2)
init !left_round(N, R)
init !proposal(R, V)
init !vote(N, R, V)
init !decision(R, V)
init !configure_round_msg(R, C)
init !complete_msg(R)
init forall R. le(master_complete, R)


# master actions


transition configure_round(r:round, c:config)
  modifies configure_round_msg, round_config
  (forall C. !configure_round_msg(r,C)) &
  le(master_complete, r) &
  complete_of(c,master_complete) &
  (forall R, C. new(configure_round_msg(R, C)) <-> configure_round_msg(R, C) | (R = r & C = c)) &
  (forall R. R != r -> new(round_config(R)) = round_config(R)) &
  new(round_config(r)) = c


transition mark_complete(r:round)
  modifies master_complete
  complete_msg(r) &
  !le(r,master_complete) &
  new(master_complete) = r


# nodes actions


transition send_1a(r: round, c: config, cr: round)
  modifies one_a
  configure_round_msg(r, c) &
  complete_of(c, cr) &
  (forall R1, R2. new(one_a(R1, R2)) <-> one_a(R1, R2) | (R1 = r & le(cr,R2) & ~le(r,R2)))


transition join_round(n: node, r: round, rp: round)
  modifies one_b, left_round, choosable_node
  one_a(r, rp) &
  !left_round(n, r) &
  (forall N, R1, R2. new(one_b(N, R1, R2)) <-> one_b(N, R1, R2) | N = n & R1 = r & R2 = rp) &
  (forall N, R. new(left_round(N, R)) <-> left_round(N, R) | N = n & !le(r, R)) &
  (forall R,V,Q.  (member(n,Q) & !le(r,R) & !vote(n,R,V)) -> new(choosable_node(R,V,Q)) = n ) &
  (forall R,V,Q. !(member(n,Q) & !le(r,R) & !vote(n,R,V)) -> new(choosable_node(R,V,Q)) = choosable_node(R,V,Q) )


mutable function quorum_of_round(round): quorum  # local to propose, cannot be mentioned in invariant

transition propose_1(r: round, c: config, cr: round, v: value)
  modifies quorum_of_round, proposal, complete_msg
  (forall R. new(quorum_of_round(R)) = new(quorum_of_round(R))) &
  configure_round_msg(r,c) &
  complete_of(c,cr) &
  (forall V. !proposal(r, V)) &
  (forall R. le(cr,R) & ~le(r,R) -> exists C. configure_round_msg(R,C)) &
  (forall R, C. le(cr,R) & ~le(r,R) & configure_round_msg(R,C) -> quorumin(quorum_of_round(R),C)) &
  (forall R, N. le(cr,R) & ~le(r,R) & member(N, quorum_of_round(R)) -> one_b(N, r, R)) &
  (forall N, MAXR, V. !(le(cr,MAXR) & !le(r, MAXR) & member(N, quorum_of_round(MAXR)) & vote(N, MAXR, V))) &
  (forall R. new(complete_msg(R)) <-> complete_msg(R) | R = r) &
  v != none &
  (forall R, V. new(proposal(R, V)) <-> proposal(R, V) | (R = r & V = v))

transition propose_2(r: round, c: config, cr: round, maxr: round, v: value)
  modifies quorum_of_round, proposal
  (forall R. new(quorum_of_round(R)) = new(quorum_of_round(R))) &
  configure_round_msg(r,c) &
  complete_of(c,cr) &
  (forall V. !proposal(r, V)) &
  (forall R. le(cr,R) & ~le(r,R) -> exists C. configure_round_msg(R,C)) &
  (forall R, C. le(cr,R) & ~le(r,R) & configure_round_msg(R,C) -> quorumin(quorum_of_round(R),C)) &
  (forall R, N. le(cr,R) & ~le(r,R) & member(N, quorum_of_round(R)) -> one_b(N, r, R)) &
  v != none &
  (exists N.           le(cr, maxr) & !le(r, maxr) & member(N, quorum_of_round(maxr)) & vote(N, maxr, v)) &
  (forall N, MAXR, V. (le(cr, MAXR) & !le(r, MAXR) & member(N, quorum_of_round(MAXR)) & vote(N, MAXR, V)) -> le(MAXR,maxr)) &
  (forall R, V. new(proposal(R, V)) <-> proposal(R, V) | (R = r & V = v))


transition cast_vote(n: node, v: value, r: round)
  modifies vote
  v != none &
  !left_round(n, r) &
  proposal(r, v) &
  (forall N, R, V. new(vote(N, R, V)) <-> vote(N, R, V) | N = n & R = r & V = v)


transition decide(r: round, c:config, v: value, q: quorum)
  modifies decision, complete_msg, decision_quorum
  v != none &
  configure_round_msg(r, c) &
  quorumin(q, c) &
  (forall N. member(N, q) -> vote(N, r, v)) &
  (forall R, V. new(decision(R, V)) <-> decision(R, V) | R = r & V = v) &
  (forall R. new(complete_msg(R)) <-> complete_msg(R) | R = r) &
  (forall R, V. !(R = r & V = v) -> new(decision_quorum(R, V)) = decision_quorum(R, V)) &
  new(decision_quorum(r, v)) = q


# safety property
safety decision(R1, V1) & decision(R2, V2) -> V1 = V2

# proposals are unique per round
invariant proposal(R,V1) & proposal(R,V2) -> V1 = V2

# only vote for proposed values
invariant vote(N, R, V) -> proposal(R, V)

# round_config is a unique witness
invariant forall R, C. configure_round_msg(R, C) -> C = round_config(R)

# only propose for rounds if all lower rounds so far are configured
invariant forall R1, R2, V, C. proposal(R2, V) & le(R1, R2) & C = round_config(R1) -> configure_round_msg(R1, C)

# master_complete or complete_of rounds are either zero or complete_msg holds for them
invariant (R2 = master_complete | (configure_round_msg(R3, C) & complete_of(C, R2))) & !le(R2, R1) -> complete_msg(R2)

# rounds in complete_msg have all prior rounds configured
invariant forall R1, R2, C. complete_msg(R2) & le(R1, R2) & C = round_config(R1) -> configure_round_msg(R1, C)

# decisions come from configured rounds with  a quorum of votes:
invariant forall R, V, C. decision(R, V) & C = round_config(R) -> configure_round_msg(R, C)
invariant forall R, V, C, Q. decision(R, V) & C = round_config(R) & Q = decision_quorum(R, V) -> quorumin(Q, C)
invariant forall R, V, C, Q, N. decision(R, V) & C = round_config(R) & Q = decision_quorum(R, V) & member(N, Q) -> vote(N, R, V)

# choosable_node is a witness
invariant member(N1,Q) & left_round(N1,R) & !vote(N1,R,V) & N2 = choosable_node(R,V,Q) -> member(N2,Q) & left_round(N2,R) & !vote(N2,R,V)

# properties of choosable and proposal
invariant forall R1, R2, V1, V2, Q, C, N. !le(R2, R1) & proposal(R2, V2) & V1 != V2 & configure_round_msg(R1, C) & quorumin(Q, C) & N = choosable_node(R1,V1,Q) ->
    member(N,Q) & left_round(N,R1) & !vote(N,R1,V1)

# properties of configure_round messages
invariant configure_round_msg(R,C) & complete_of(C,MINREL) -> le(MINREL,R) & le(MINREL, master_complete)

# complete, choosable, decision
invariant forall RR, R, C, Q, V. complete_msg(RR) & !le(RR,R) & configure_round_msg(R,C) & quorumin(Q,C) & !decision(RR, V) & N = choosable_node(R,V,Q)->
    member(N,Q) & left_round(N,R) & !vote(N,R,V)

# properties of one_b, left_round
invariant one_b(N,R1,R2) & !le(R1,R3) -> left_round(N,R3)
