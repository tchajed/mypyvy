sort key
sort node
sort value

mutable relation table(node, key, value)
mutable relation owner(node, key)
mutable relation transfer_msg(node, key, value)

init !table(N, K, V)
init !transfer_msg(N, K, V)
init owner(N1, K) & owner(N2, K) -> N1 = N2
# init forall K. exists N. owner(N, K)

transition reshard(k: key, v: value, n_old: node, n_new: node)
  modifies table, owner, transfer_msg
  table(n_old, k, v) &
  (new(table(N, K, V)) <-> table(N, K, V) & !(N = n_old & K = k & V = v)) &
  (new(owner(N, K)) <-> owner(N, K) & !(N = n_old & K = k)) &
  (new(transfer_msg(N, K, V)) <-> transfer_msg(N, K, V) | (N = n_new & K = k & V = v))


transition recv_transfer_msg(n: node, k: key, v: value)
  modifies table, owner, transfer_msg
  transfer_msg(n, k, v) &
  (new(transfer_msg(N, K, V)) <-> transfer_msg(N, K, V) & !(N = n & K = k & V = v)) &
  (new(table(N, K, V)) <-> table(N, K, V) | (N = n & K = k & V = v)) &
  (new(owner(N, K)) <-> owner(N, K) | (N = n & K = k))


transition put(n: node, k: key, v: value)
  modifies table
  owner(n, k) &
  (!(N = n & K = k) -> (new(table(N, K, V)) <-> table(N, K, V))) & 
  (new(table(n, k, V)) <-> V = v)

safety [keys_unique] table(N1, K, V1) & table(N2, K, V2) -> N1 = N2 & V1 = V2

invariant owner(N1, K) & owner(N2, K) -> N1 = N2
invariant table(N, K, V) -> owner(N, K)

invariant !(transfer_msg(N1, K, V) & owner(N2, K))
invariant transfer_msg(N1, K, V1) & transfer_msg(N2, K, V2) -> N1 = N2 & V1 = V2

